@page "/Alltasks"

@inject HttpClient Http

@using TaskManager.Business.Dtos

<div class="navbar">
    <form class="form-inline">
        <EditForm Model="@tasks" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">

            <InputText id="status" @bind-Value="@status"></InputText>

            <InputDate id="start" @bind-Value="@startDate"></InputDate>

            <InputDate id="end" @bind-Value="@endDate"></InputDate>

            <button class="btn btn-primary m-2 my-sm-0">Search</button>
            <button class="btn btn-outline-primary m-2 my-sm-0">Reset</button>
        </EditForm>
    </form>
</div>
<div class="alert">@message</div>
@if (tasks == null)
{

    <div class="center colorful-3"></div>
}
else
{
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Status Id</th>
                    <th>Status Name</th>
                    <th>Start</th>
                    <th>End</th>
                    <th>User Id</th>
                    <th> </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in tasks)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Title</td>
                        <td>@item.Status.Id</td>
                        <td>@item.Status.Name</td>
                        <td>@item.StartDate.ToString()</td>
                        <td>@item.EndDate.ToString()</td>
                        <td>@item.UserId</td>
                        <td><a href="@($"AddTask/{item.Id}")" class="btn btn-outline-primary @*stretched-link*@">Edit</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }

@code {


    private IEnumerable<TaskUi> tasks;

    private string status= "Pending";
    private DateTimeOffset startDate = DateTimeOffset.Now ;
    private DateTimeOffset endDate = DateTimeOffset.Now;
    private string message = "";

    protected override async Task OnInitializedAsync()
    {

        tasks = (await Http.GetFromJsonAsync<IEnumerable<TaskUi>>("/Task"));
    }

    public class TaskUi
    {
        public int Id { get; set; }

        public string Title { get; set; }

        public string Description { get; set; }

        public DateTimeOffset StartDate { get; set; }

        public DateTimeOffset EndDate { get; set; }

        public TaskStatusDto Status { get; set; }

        public int UserId { get; set; }
    }

    public class TaskStatusUi
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }

    protected async Task HandleValidSubmit()
    {

        tasks = (await Http.GetFromJsonAsync<IEnumerable<TaskUi>>("/Task"))
            .Where(c => c.Status.Name.Contains(status) && c.StartDate >= startDate && c.EndDate >= endDate)
            .OrderBy(o => o.StartDate)
            .ToList();
    }

    protected void HandleInvalidSubmit()
    {
        message = "There are some search errors. Please try again.";
    }


}
