@page "/AddTask"
@page "/AddTask/{Id}"

@inject HttpClient Http
@inject NavigationManager Navigation

@using TaskManager.Business.Dtos


<div class="container">
    <form>
        <EditForm Model="@task">
            <div class="form-outline">
                <label for="Title">Title</label>
                <InputText id="title" @bind-Value="@task.Title"></InputText>
            </div>
            <div class="form-outline">
                <label for="StartDate">Start</label>
                <InputDate id="start" @bind-Value="@task.StartDate"></InputDate>
            </div>
            <div class="form-outline">
                <label for="StartDate">End</label>
                <InputDate id="end" @bind-Value="@task.EndDate"></InputDate>
            </div>

            <div class="imput-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Description</span>
                </div>
                <InputTextArea @bind-Value="@task.Description"></InputTextArea>
            </div>

            <div class="form-outline">
                <label for="status">Status</label>
                <InputSelect id="status" @bind-Value="@task.Status.Id">
                    @foreach (var status in taskStatus)
                    {
                        <option value="@status.Id">@status.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary edit-btn">Save</button>
                <a class="btn btn-danger" @onclick="@DeleteTask">Delete</a>
            </div>
        </EditForm>
    </form>
</div>


@code {

    [Parameter]
    public string Id { get; set; }

    public TaskUi task { get; set; } = new TaskUi
    {
        StartDate = DateTime.Now,
        EndDate = DateTime.Now,
        Status = new TaskStatusDto { Id = 1 }
    };
    public IEnumerable<TaskStatusUi> taskStatus = new List<TaskStatusUi>();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            task = await Http.GetFromJsonAsync<TaskUi>($"/Task/{Id}");
        }
        taskStatus = await Http.GetFromJsonAsync<IEnumerable<TaskStatusUi>>("/TaskStatus");
    }

    public class TaskUi
    {
        public int Id { get; set; }

        public string Title { get; set; }

        public string Description { get; set; }

        public DateTimeOffset StartDate { get; set; }

        public DateTimeOffset EndDate { get; set; }

        public TaskStatusDto Status { get; set; }

        public int UserId { get; set; }
    }

    public class TaskStatusUi
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }

    protected async Task DeleteTask()
    {
        await Http.DeleteAsync(($"/Task/{Id}"));
        Navigation.NavigateTo("/");

    }
}
